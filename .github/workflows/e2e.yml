name: tests

on:
#   schedule:
#     - cron: 0 0 * * *
  repository_dispatch:
    types: [deployed]
  workflow_dispatch:
jobs:
  ui:
    name: UI test

    runs-on: ubuntu-latest

    env:
      DEFAULT_BRANCH: master
      AWS_REGION: us-east-2
      NODE_VERSION: 14.x

    steps:
      - name: Checkout to branch ${{ env.DEFAULT_BRANCH }}
        uses: actions/checkout@v2
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Run npm install
        run: npm install

      - name: Run docker compose for selenium
        run: docker-compose up -d

      - name: Running UI tests
        run: npm run test:ui

      - name: Upload reports to AWS bucket
        run: aws s3 sync ./mochawesome-reports ${{ secrets.AWS_BUCKET }}ui-test-reports/ 
        if: ${{ always() }}
  api:
    name: API tests
    needs: ui

    runs-on: ubuntu-latest

    env:
      DEFAULT_BRANCH: master
      NODE_VERSION: 14.x
      AWS_REGION: us-east-2

    steps:
      - name: Checkout to branch ${{ env.DEFAULT_BRANCH }}
        uses: actions/checkout@v2
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - run: npm install
      - name: Running API tests
        run: npm run test:api
      - name: Upload reports to AWS bucket
        run: aws s3 sync ./mochawesome-report ${{ secrets.AWS_BUCKET }}api-tests-report/ 
        if: ${{ always() }}